import h5py
import numpy
import numpy as np
import pytest

from napari_melt_pool_tracker import napari_get_reader


@pytest.fixture(params=[0, 1, 2])
def seed(request):
    return request.param


@pytest.fixture(params=["ID19", "TOMCAT"])
def beamline(request):
    return request.param


# tmp_path is a pytest fixture
@pytest.fixture
def random_h5_file(tmp_path, seed, beamline):
    """
    Pytest factory that can generate h5 files consistent
    with the ones generated by the ID19 beam line.
    It containes random integers in the range from 0 to 2**14.

    Parameters
    ----------
    """
    rng = numpy.random.default_rng(seed=seed)

    # generate some fake data
    test_file = str(tmp_path / "test_file.h5")
    original_data = rng.integers(
        low=0, high=2**14, size=(20, 20), dtype=np.uint16
    )

    # write the fake data to h5
    with h5py.File(test_file, "w") as f:
        if beamline == "TOMCAT":
            group = f.create_group("exchange")
            dataset = group.create_dataset(
                "data", original_data.shape, dtype="ushort"
            )
            dataset.write_direct(original_data)
        elif beamline == "ID19":
            dataset = f.create_dataset(
                "image_stack", original_data.shape, dtype="ushort"
            )
            dataset.write_direct(original_data)

    return original_data, test_file


def test_reader(random_h5_file):
    """Test the h5 file reader."""

    original_data, test_file = random_h5_file

    # try to read data
    reader = napari_get_reader(test_file)
    assert callable(reader)

    # make sure we're delivering the right format
    layer_data_list = reader(test_file)
    assert isinstance(layer_data_list, list) and len(layer_data_list) > 0
    layer_data_tuple = layer_data_list[0]
    assert isinstance(layer_data_tuple, tuple) and len(layer_data_tuple) > 0

    # make sure it's the same as it started
    np.testing.assert_allclose(original_data, layer_data_tuple[0])

    # Image stacks are not supported and one h5 file should be loaded at a time
    with pytest.raises(ValueError):
        napari_get_reader([test_file, test_file])


def test_get_reader_pass():
    reader = napari_get_reader("fake.file")
    assert reader is None
